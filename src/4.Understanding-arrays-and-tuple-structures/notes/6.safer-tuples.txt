🌟 Readonly Tuples in TypeScript

Tuples in TypeScript allow you to define arrays with a fixed number of elements and distinct types for each element.
By default, tuples are mutable, meaning their elements can be modified — you can assign new values, push, pop, etc.

Sometimes, you want to make tuples immutable to ensure safety and prevent accidental mutations.

🔹 The Problem — Unsafe Tuple Mutation

Consider this unsafe function:

function unsafe(arr: string[]) {
  arr.pop();
}


And a tuple:

const myName: [string, string, string] = ["John", "Doe", "Smith"];


If we call the unsafe function:

unsafe(myName);
console.log(myName[0]); // ❌ Could be undefined


Problem:

The function mutates the tuple by popping elements.

After mutation, accessing elements by index can give undefined.

This leads to runtime errors and unexpected behavior.

🔹 The Solution — Using readonly Tuples

We can make the tuple immutable by adding the readonly keyword:

const myName: readonly [string, string, string] = ["John", "Doe", "Smith"];


Now, if you try to pass it to a function that mutates it:

unsafe(myName); 
// ❌ TypeScript Error: Type 'readonly [string, string, string]' is 
// not assignable to type 'string[]'. The types of 'pop' are incompatible.


✅ Explanation:

readonly prevents any mutation: no push, pop, or element assignment.

TypeScript will catch errors at compile time if a function tries to modify a readonly tuple.

This ensures safety and prevents subtle bugs.

🔹 Why Readonly Tuples Are Useful

Protects tuple data from unintended changes.

Makes function contracts clearer: functions expecting mutable arrays cannot accept immutable tuples.

Common practice in libraries and large codebases to improve safety and maintainability.

Saves time and headaches by catching mutation errors early.

🧠 Key Takeaways
Concept	Description	Example
Readonly Tuple	Prevents mutation of tuple elements	readonly [string, string, string]
Mutation Prevention	Blocks .push(), .pop(), and direct assignments	myTuple[0] = "x" ❌
Safe Function Calls	Prevents passing mutable arrays to readonly tuples	unsafe(myTuple) ❌
Best Practice	Readonly tuples are safer than normal tuples	Use in function parameters and data storage
🎯 Summary

Adding readonly to a tuple creates an immutable data structure.

Helps catch bugs at compile time instead of runtime.

Recommended in production code and libraries for safer, more predictable behavior.