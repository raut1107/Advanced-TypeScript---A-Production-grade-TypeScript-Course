ðŸŒŸ Using infer with Function Types â€“ TypeScript

Function types in TypeScript are not just black boxes â€” theyâ€™re structured types that contain detailed information about:

Their parameters (as a tuple of argument types)

Their return value (as a single type)

This means a function type can be viewed as an object containing both of these pieces of information.
Using the infer keyword, we can extract either part directly from the function type.

ðŸ”¹ Extracting Function Parameters
type MyParameters<F> = 
  F extends (...args: infer A) => any ? A : never;


Checks if F is a function type with arguments

Uses infer A to capture the list of argument types as a tuple

Returns never if F isnâ€™t a function

âœ… Example

type Example = (x: string, y: number) => boolean;
type Params = MyParameters<Example>; 
// Result: [string, number]

ðŸ”¹ Extracting Function Return Type
type MyReturnType<F> = 
  F extends (...args: any[]) => infer R ? R : never;


Checks if F is a function type that returns something

Uses infer R to capture the return type

Returns never if not a valid function

âœ… Example

type Example = (x: string, y: number) => boolean;
type Result = MyReturnType<Example>; 
// Result: boolean

ðŸ§  Why This Matters

TypeScriptâ€™s standard library already includes these utilities:

Parameters<T> â†’ Extracts function parameter types

ReturnType<T> â†’ Extracts function return type

But learning how to write them yourself helps you understand:

The power of infer in pattern matching

How conditional types can deconstruct complex type structures

How to build your own type utilities for advanced scenarios